
一、离线玩家进行体力更新介绍说明
1、玩家注册账号后，大部分情况下是不在线的；服务器里在线玩家也是远远小于离线玩家的；
如果还是像对在线玩家那样，每隔几分钟对数据库所有玩家遍历一遍进行体力判断，则工作量十分巨大且没有必要的；
而且很多数据不在缓存层，而是在数据库里，需要对数据库进行访问；
所以对于离线玩家不能像在线玩家那样每隔几分钟就遍历检测判断处理；
2、对于离线玩家，记录离线时间，当下次上线时，根据上线当前时间计算时间差；
然后处理时间差，计算应该增加恢复多少体力；

二、数据库新增玩家离线时间字段
打开数据库aql_darkgod，选择表account，右键设计表，在diamond字段下面插入新字段offlinetime
类型bigint，长度11，小数点0，勾选 不是null，其他保持默认

二、服务器新增字段相关设置
1、TimerSvc.cs里添加接口GetNowTime()；
对PETimer.cs里获取当前时间的api的转接，主要PETime.cs里是double类型
我们不需要那么精确，而且获取的时间是非常大的毫秒数（计算机纪元时间到现在为止的总毫秒数），
所以这里包括玩家数据里的时间，使用long类型进行转换存储；
public long GetNowTime() { return (long)pTimer.GetMillisecondsTime(); }

2、GameMsg.cs脚本的PlayerData里新增long类型的offlinetime字段，记录玩家离线时间；
public class PlayerData
{
    ... ...
    public long offlineTime;
}

3、DBManager.cs脚本添加对offlinetime字段的设置
（1）QueryPlayerData()
public PlayerData QueryPlayerData(string acct,string pass)
{
    ... ...
    if (_pass.Equals(pass))
    {
        playerData = new PlayerData//密码正确，返回玩家数据
        {
            ... ...,
            offlineTime = reader.GetInt64("offlinetime"),
       };
   }
    ... ...
    if (isNew)
        {
            playerData = new PlayerData
            {
                ... ...,
                offlineTime = TimerSvc.Instance.GetNowTime(),//新账号默认使用创建时间
            };
            playerData.id = InsertNewAcctData(acct, pass, playerData);
        }
        ... ...
}
（2）InsertNewAcctData()
private int InsertNewAcctData(string acct, string pass, PlayerData pData)
{
    ... ...
    try
    {
        MySqlCommand cmd = new MySqlCommand("insert into account set acct=@acct,pass=@pass,name=@name,"
            + "level=@level,exp=@exp,power=@power,coin=@coin,diamond=@diamond,crystal=@crystal,"
            + "hp=@hp,ad=@ad,ap=@ap,addef=@addef,apdef=@apdef,dodge=@dodge,pierce=@pierce,"
            +"critical=@critical,guideid=@guideid,strong=@strong,offlinetime = @offlinetime", SqlConnection);
        ... ...
        cmd.Parameters.AddWithValue("offlinetime", pData.offlineTime);//离线时间
        ... ...
    }
    ... ...
}
（3）UpdatePlayerData()
public bool UpdatePlayerData(int id,PlayerData playerData)
{
    try
    {
        MySqlCommand cmd = new MySqlCommand( "update account set name=@name,level=@level,"
    +"exp=@exp,power=@power,coin=@coin,diamond=@diamond,crystal=@crystal,hp=@hp,"
    +"ad=@ad,ap=@ap,addef=@addef,apdef=@apdef,dodge=@dodge,pierce=@pierce,critical=@critical,"
    +"guideid=@guideid,strong=@strong,offlinetime = @offlinetime where id =@id", SqlConnection);
        ... ....
        cmd.Parameters.AddWithValue("offlinetime", playerData.offlineTime);//离线时间
        ... ...
    }
    ... ...
}

三、重新生成编译运行服务器程序和PEProtocol.dll

四、使用玩家offlineTime字段
1、在服务器的LoginSys.cs里使用offlineTime字段
（1）在LoginSys.cs里添加对TimerSvc.cs的引用，并在初始化Init()里赋值；
（2）在请求登录时，从数据库拉取玩家数据，进行缓存并把数据发送给客户端；
在缓存前就对玩家的体力数据做个运算处理；
原：
public void ReqLogin(MsgPack msgPack)
{
        ... ...
        if (pData == null) msg.err = (int)ErrorCode.PassWrong;//密码错误，返回错误码
        else//账号存在,进行缓存，并返回玩家信息
        {
            msg.rspLogin = new RspLogin { playerData = pData };
            cacheSvc.AcctOnline(data.acct, msgPack.m_Session, pData);
        }
        ... ...
}
改：
public void ReqLogin(MsgPack msgPack)
{
        ... ...
        if (pData == null) msg.err = (int)ErrorCode.PassWrong;//密码错误，返回错误码
        else//账号存在,进行缓存，并返回玩家信息
        {
            int powerMax = PECommon.GetPowerLimit(pData.lv);//获取体力上线
            int curPower = pData.power;//当前体力的值
            if (curPower < powerMax)//离线前体力小于体力上限，计算离线体力增长
            {
                long curTime = timerSvc.GetNowTime();//获取本次上线时间
                long interval = curTime - pData.offlineTime;//计算离线时长
                int addPower = (int)(interval / (1000 * 60 * PECommon.PowerAddSpace)) * PECommon.PowerAddCount;
                if (addPower > 0)//离线时长大于5分钟，才有体力增长
                {
                    pData.power += addPower;
                    if (pData.power > powerMax) pData.power = powerMax;
                }
            }
            if (curPower != pData.power) cacheSvc.UpdatePlayerData(pData.id, pData);//体力有更新，更新数据库
            msg.rspLogin = new RspLogin { playerData = pData };
            cacheSvc.AcctOnline(data.acct, msgPack.m_Session, pData);
        }
        ... ...
}

五、测试
为了方便测试，
1、这里临时修改下计算的时间间隔
public void ReqLogin(MsgPack msgPack)
{
            ... ...
            if (curPower < powerMax)//离线前体力小于体力上限，计算离线体力增长
            {
                ... ...
                int addPower = (int)(interval / (1000* PECommon.PowerAddSpace)) * PECommon.PowerAddCount;
                ... ...
            }
            ... ...
}
2、清空、修改数据库
之前新增字段，旧数据没啥必要，这里干脆清空，重新注册生成玩家数据
修改新生成的玩家体力数据，方便测试体力变化；

注，修改了addPower 的体力计算，导致在创建新账号后，离线修改数据库，再到重新运行，
这段时间体力增长的挺多的，建议修改数据库时，体力数值改为0，不至于再次运行时，发现体力涨回上限；

六、优化解决bug
1、对MainCitySys.cs的PshPower()进行优化
由于启动服务器，开始游戏，还未打开客户端界面，体力数据就已经转递到客户端了；
MainCitySys.cs的mainCityWnd还是为空状态，导致执行PshPower()时报错；
原：
public void PshPower(GameMsg msg)
{
    ... ...
    mainCityWnd.RefreshUI();
}
改：
public void PshPower(GameMsg msg)
{
    ... ...
    if(mainCityWnd.gameObject.activeSelf) mainCityWnd.RefreshUI();
}

七、更新玩家的offlineTime
前面计算了本次登录和离线时间的时间差，并进行体力计算更新；
还没有添加对玩家的offlineTime进行更新，玩家的offlineTime始终是账号创建时间；
导致现在只要一登录，玩家的体力就是达到上限状态，这里对offlineTime进行修改更新；

在服务器的LoginSys.cs的ClearOfflineData()里更新offlineTime数据
在玩家离线后，缓存层清理玩家数据；
在清理玩家数据前，更新玩家的下线时间；
原：
public void ClearOfflineData(ServerSession session){ cacheSvc.AccOffLine(session);}
改：
public void ClearOfflineData(ServerSession session)
{
    PlayerData pData = cacheSvc.GetPlayDataBySession(session);//获取玩家数据
    if (pData != null)//玩家存在
    {
        pData.offlineTime = timerSvc.GetNowTime();//更新玩家离线时间
        if (!cacheSvc.UpdatePlayerData(pData.id, pData))
            PECommon.Log("Update offline time error", LogType.Error);
        cacheSvc.AccOffLine(session);//缓存清空下线玩家数据，玩家下线
    }
}

八、优化
为了安全起见，在每次更新体力时，就把离线时间刷新进去，避免突发意外离线断开，玩家的离线时间没有写入；
在每次更新体力时，就把离线时间刷新进去，这样就对数据起到双重保险；
1、在服务器PowerSys.cs添加对TimerSvc.cs进行引用；
2、对服务器PowerSys.cs的CalcuatePowerAdd()里进行优化
原：
private void CalcuatePowerAdd(int tid)
{
        ... ...
        if (pData.power >= powerMax) continue;
        else
        {
            pData.power += PECommon.PowerAddCount;
            if (pData.power > powerMax) pData.power = powerMax;
        }
        ... ...
}
改：
private void CalcuatePowerAdd(int tid)
{
        ... ...
        if (pData.power >= powerMax) continue;
        else
        {
            pData.power += PECommon.PowerAddCount;
            pData.offlineTime = timerSvc.GetNowTime();
            if (pData.power > powerMax) pData.power = powerMax;
        }
        ... ...
}

九、测试
1、这里临时修改下计算的时间间隔
public void ReqLogin(MsgPack msgPack)
{
            ... ...
            if (curPower < powerMax)
            {
                ... ...
                int addPower = (int)(interval / (1000* PECommon.PowerAddSpace)) * PECommon.PowerAddCount;
                ... ...
            }
            ... ...
}
2、清空数据库，重新注册生成玩家数据，然后离线，修改玩家体力数据为0；
3、再到重新运行服务器和客户端，查看玩家体力变化
测试完注意把时间改回去

除了LoginSys.cs的CalcuatePowerAdd()里，还有PowerSys.cs的Init()
改回：
public class LoginSys
{
    ... ...
    public void ReqLogin(MsgPack msgPack)
    {
                ... ...
                if (curPower < powerMax)//离线前体力小于体力上限，计算离线体力增长
                {
                    ... ...
                    int addPower = (int)(interval / (1000 * 60 * PECommon.PowerAddSpace)) * PECommon.PowerAddCount;
                    ... ...
                }
                ... ...
    }
}
public class PowerSys
{ 
    ... ... 
    public void Init()
    {
        ... ...
        TimerSvc.Instance.AddTimeTask(CalcuatePowerAdd, PECommon.PowerAddSpace, PETimeUnit.Minute, 0);
        PECommon.Log("PowerSys Init Done.");
    }
}






