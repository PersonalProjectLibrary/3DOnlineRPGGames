
1、TaskWnd.cs的ClickRewardBtn()里添加向服务器发送任务奖励的请求逻辑
private void ClickRewardBtn(string btnName)
{
    string[] nameArr = btnName.Split('_');
    int index = int.Parse(nameArr[1]);//点击的是哪个Item
    GameMsg msg = new GameMsg//发送网络消息
    {
        cmd = (int)CMD.ReqTaskReward,
        reqTaskReward = new ReqTaskReward
        {
            rewardid = taskRewardList[index].ID
        }
    };
    netService.SendMsg(msg);
    //根据配置文件信息，显示成功领取奖励的提示
    TaskRewardCfg trc = resService.GetTaskRewardCfgData(taskRewardList[index].ID);
    GameRoot.AddTips(Constants.SetTxtColor("获得奖励：", TxtColor.Blue) + Constants.SetTxtColor(" 金币 + " + trc.coin + " 经验 + " + trc.exp, TxtColor.Green));
}

2、将MainCitySystem.cs里处理服务器响应任务奖励请求的方法RspTask()重命名为RspTReward()
public void RspTReward(GameMsg msg)
{
    //TODO
}

3、在NetSvc.cs的ProcessMsg()里添加对任务奖励及新增错误码的分支处理
public void ProcessMsg(GameMsg msg)
{
    if (msg.err != (int)ErrorCode.None)//返回的是错误信息
    {
        switch ((ErrorCode)msg.err)
        {
            ... ...
            case ErrorCode.ClientDataError:
                GameRoot.AddTips("客户端数据异常");
                break;
            ... ...
        }
        return;
    }
    switch ((CMD)msg.cmd)//将信息分发出去
    {
        ... ...
        case CMD.RspTaskReward:MainCitySystem.Instance.RspTReward(msg);break;
        default:break;
    }
}

4、运行测试
方便测试，这里在服务端的TaskRewardSys.cs的ReqTaskReward()进行控制台输出显示
public void ReqTaskReward(MsgPack pack)
{
    //TODO
    PECommon.Log("TaskRewardSys coin：" + pack.m_Msg.reqTaskReward.rewardid);
}
