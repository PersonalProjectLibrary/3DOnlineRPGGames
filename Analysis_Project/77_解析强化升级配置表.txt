
参考BaseData.cs里对引导任务、地图配置等的配置文件类设置，新建强化升级的配置文件类
参考ResService.cs脚本里对引导任务、地图配置等的配置文件的解析，对装备强化升级的配置表解析

1、在PathDefine.cs里新增强化升级配置文件的获取路径EqptStrongCfg 
public const string EqptStrongCfg = "ResConfigs/eqptstrong";

2、在BaseData.cs里新建强化升级的配置表数据类EqptStrongCfg
public class EqptStrongCfg : BaseData<EqptStrongCfg>
{
    public int pos;// 几号装备
    public int starLv;// 星级等级
    public int addHp;// 可增加的生命加成值
    public int addHurt;// 可增加的伤害加成值
    public int addDef;// 可增加的防御加成值
    public int minLv;// 所需最小等级
    public int coin;// 所需金币
    public int crystal;// 所需水晶
}

3、在ResService.cs里对强化升级的配置文件进行解析
// 强化升级的字典(装备pos,(装备星级，配置文件))
private Dictionary<int,Dictionary<int, EqptStrongCfg>> eqptStrongDic = new Dictionary<int,Dictionary<int, EqptStrongCfg>>();
// 强化升级配置文件解析
private void InitStrongCfg(string path)
{
    TextAsset nameXml = Resources.Load<TextAsset>(path);
    if (!nameXml) PECommon.Log("Xml file:" + path + "not exist!", LogType.Error);
    else
    {
        XmlDocument doc = new XmlDocument();
        doc.LoadXml(nameXml.text);
        XmlNodeList nodeList = doc.SelectSingleNode("root").ChildNodes;
        eqptStrongDic = new Dictionary<int, Dictionary<int, EqptStrongCfg>>();
        for (int i = 0; i < nodeList.Count; i++)
        {
            XmlElement element = nodeList[i] as XmlElement;
            if (element.GetAttributeNode("ID") == null) continue;
            int id = Convert.ToInt32(element.GetAttributeNode("ID").InnerText);
            EqptStrongCfg esg = new EqptStrongCfg { ID = id };
            foreach (XmlElement e in nodeList[i].ChildNodes)
            {
                int val = int.Parse(e.InnerText);
                switch (e.Name)
                {
                    case "pos": esg.pos = val; break;
                    case "starlv": esg.starLv = val; break;
                    case "addhp": esg.addHp = val; break;
                    case "addhurt": esg.addHurt = val; break;
                    case "adddef": esg.addDef = val; break;
                    case "minlv": esg.minLv = val; break;
                    case "coin": esg.coin = val; break;
                    case "crystal": esg.crystal = val; break;
                }
            }
            Dictionary<int, EqptStrongCfg> sDic =null;
            if(eqptStrongDic.TryGetValue(esg.pos,out sDic)) 
                sDic.Add(esg.starLv, esg);
            else
            {
                sDic = new Dictionary<int, EqptStrongCfg> { { esg.starLv, esg } };
                eqptStrongDic.Add(esg.pos, sDic);
            };
        }
    }
}
// 获取强化升级的配置文件
public EqptStrongCfg GetStrongCfgData(int pos,int startLv)
{
    EqptStrongCfg esg = null;
    Dictionary<int, EqptStrongCfg> sDic = null;
    if (eqptStrongDic.TryGetValue(pos, out sDic))
    {
        if(sDic.ContainsKey(starLv)) sDic.TryGetValue(starLv, out esg);
    }
    return esg;
}
// 初始化资源加载服务
public void InitService()
{
    ... ...
    InitStrongCfg(PathDefine.EqptStrongCfg);
}

4、这里将ResService.cs里的GetAutoGuideData()重命名为GetGuideCfgData()；

5、断点运行测试是否正确解析配置表数据




