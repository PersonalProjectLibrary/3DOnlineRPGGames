
一、初始环境搭建
1、Assets下新建Scripts文件夹，用于存放游戏的脚本
Scripts里新建GameRoot.cs作为游戏的启动脚本，然后脚本挂载到场景的根节点GameRoot身上；

2、Scripts下新建Service文件夹，用于存放游戏的各个服务相关的脚本：
网络服务：NetService.cs
计时服务：TimerService.cs
资源加载服务：ResService.cs
声音播放服务：AudioService.cs

3、Scripts下新建System文件夹，用于存放游戏的各个系统相关的脚本：
登录注册业务系统：LoginSystem.cs
主城业务系统：MainCitySystem.cs
副本业务系统：MissionSystem.cs
战斗业务系统：BattleSystem.cs

公共业务系统API：方便在各个业务系统中调用

二、实现游戏启动初始化
1、将ResService.cs、LoginSystem.cs也挂载到GameRoot身上

各个服务模块、系统模块脚本作为单例类，需要在其他地方调用，
放到GameRoot身上，方便GameRoot直接获取各个组件、初始化等操作；

2、ResService.cs做成单例
添加服务初始化函数InitService();

3、LoginSystem.cs做成单例
（1）添加登录初始化函数InitLogin();
（2）添加进入登录界面的函数

4、GameRoot.cs做成不销毁单例
（1）游戏里也仅存唯一的GameRoot，将GameRoot.cs做成单例；

（2）Start方法里设置GameRoot不会被销毁了；
所有服务、系统都是挂在在GameRoot物体上，
UI的根节点也是挂在GameRoot上的，
GameRoot包括所有子物体也是一直场景中的；
所以保证GameRoot一直存在不被销毁；

注意：场景里的EventSystem物体也放到GameRoot里，保证和GameRoot一样不被销毁；

（3）添加游戏初始化方法Init();
优先初始化服务模块，其他系统都需要服务资源才能初始化；
然后初始化业务系统；（这里暂时只考虑注册登录系统的实现）；

注：ResService.cs和LoginSystem.cs里的初始化操作，都是GameRoot.cs统一调用，
没有用各自脚本里的Start/Awake方法，这样保证人为控制脚本初始化顺序；
避免多个Awake/Start方法，导致执行顺序混乱；
即使专门去 菜单栏：Edit--ProjectSettings--ScriptExecutionOrder设置脚本执行顺序也很麻烦；

三、登录场景加载
1、Scripts里新建Common文件夹，放置公用的类
Common里新建Constants.cs，用于常量配置；

2、Scripts里新建UIWindow文件夹，放置Wnd层级的脚本
LoginWnd.cs：登录注册界面
CreateWnd.cs：角色创建界面
-------------------------------------
MainCityWnd.cs：主城主界面
InfoWnd.cs：角色信息界面
StrongWnd.cs：角色强化界面
GuideWnd.cs：人物引导界面
BuyWnd.cs：资源交易界面
ChatWnd.cs：聊天界面
TaskWnd.cs：人物奖励界面
-------------------------------------
MissionChooseWnd.cs：关卡选择界面
-------------------------------------
PlayerControlWnd.cs：角色控制界面
BattleEndWnd.cs：战斗结算界面
-------------------------------------
DynamicWnd.cs：动态元素窗口：
如：tips
LoadingWnd.cs：加载进度界面

3、ResService.cs里添加加载加载场景的函数AsyncLoadScene
场景资源比较大，所以一般都是使用异步加载，使用进度条来展示加载进度。
在LoginSystem.cs的EnterLogin()，进行调用加载登录场景；

注：先把登录场景添加到BuildSettings--ScenesInBuild里
再运行加载场景操作

四、加载界面实现
1、将LoadingWnd.cs挂在到LoadingWnd物体/预制体身上
LoadingWnd.cs属于公共业务系统，其引用使用放到GameRoot.cs里面；
注意GameRoot物体身上的GameRoot.cs里对LoadingWnd界面的绑定；

2、LoadingWnd.cs里添加进度条加载功能
（1）进度条重置：InitWnd()，加载界面打开时，进度条置为0；
（2）添加控制进度条加载的函数SetProgress()；

3、LoginSystem.cs的EnterLogin()，进行调用加载登录场景；
（1）先打开、初始化场景加载界面；
（2）进行异步加载登录场景资源，并根据异步加载进度，设置进度条加载显示；
（3）添加progressAction事件，实现通过Updat()里不断更新进度条的加载更新；
（4）加载完成场景切换后，关闭加载界面；

五、添加登录注册界面逻辑
1、将LoginWnd.cs脚本挂载到场景的LoginWnd对象/预制体上；

2、添加界面初始化方法InitWnd()
这里使用PlayerPrefs做用户账号登录记录的本地记录持久化操作；

3、在LoginSystem.cs添加对登录界面是引用方法；
登录界面属于登录系统的业务，所以在LoginSystem.cs里添加对登录界面的引用调用；
（1）添加对LoginWnd.cs的引用；
注意场景里GameRoot物体身上的LoginSystem.cs里对LoginWnd界面的绑定；
（2）添加打开登录界面的函数OpenLoginWnd()；
在ResService.cs的异步加载场景AsyncLoadScene()里进行对OpenLoginWnd()的引用；
场景加载完成，关闭加载界面后，打开登录界面；

注：这里将LoginSystem.cs的EnterLogin()里使用GameRoot初始化界面的语句，
放到ResService.cs的异步加载场景AsyncLoadScene()里；
因为除了登录切换场景，还有其他很多地方也会使用切换场景，
对场景初始化的操作放到异步加载场景方法里去执行；
而不是外面重复写语句执行；

六、优化异步加载场景操作
1、优化ResService.cs的AsyncLoadScene(string sceneName)，
优化添加事件回调函数，AsyncLoadScene(string sceneName,Action loaded)
在场景加载后执行回调事件，而不是把场景加载后执行的操作写死在场景加载方法里；

如游戏启动加载界面后打开登录注册界面，把打开登录界面操作通过事件回调来执行；
避免写到场景方法里，导致不论什么场景加载，都会打开登录注册界面这种bug出现；

LoginSystem.cs的EnterLogin()里执行异步加载登录场景的语句，
也由：ResService.Instance.AsyncLoadScene(Constants.SceneLogin);
改为：ResService.Instance.AsyncLoadScene(Constants.SceneLogin,OpenLoginWnd);

2、优化LoginSystem.cs的EnterLogin()；
将OpenLoginWnd()的功能语句，通过lamada表达式，写到EnterLogin()里；
减少方法函数个数；
原：
public void EnterLogin()
{
    ResService.Instance.AsyncLoadScene(Constants.SceneLogin,OpenLoginWnd);
}

public void OpenLoginWnd()
{
    loginWnd.gameObject.SetActive(true);//打开登录界面
    loginWnd.InitWnd();//对登录界面进行初始化
}
改：
public void EnterLogin()
{
    ResService.Instance.AsyncLoadScene(Constants.SceneLogin, () => 
    {
        loginWnd.gameObject.SetActive(true);//打开登录界面
        loginWnd.InitWnd();//对登录界面进行初始化
    });
}



















