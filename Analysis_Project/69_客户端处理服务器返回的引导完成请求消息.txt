
一、添加对服务器回应消息的分发处理
1、MainCitySys.cs里新增处理服务器回应引导任务请求的消息的函数RspGuide()
并在NetService.cs的ProcessMsg()里调用；
public void RspGuide(GameMsg msg)
{
    RspGuide data = msg.rspGuide;//获取服务器数据
}

2、NetService.cs的ProcessMsg()里新增对服务器回应引导任务请求的消息的处理分支
包括新增对应错误码的处理分支
public void ProcessMsg(GameMsg msg)
{
    if (msg.err != (int)ErrorCode.None)//返回的是错误信息
    {
        switch ((ErrorCode)msg.err)
        {
            ... ...
            case ErrorCode.ServerDataError:
                PECommon.Log("服务器数据异常", LogType.Error);
                GameRoot.AddTips("客户端数据异常");
                break;
        }
        return;
    }
    switch ((CMD)msg.cmd)//将信息分发出去
    {
        ... ...
        case CMD.RspGuide:MainCitySystem.Instance.RspGuide(msg);break;
    }
}

二、获取服务器回应的消息后，解析处理数据
1、这里要给玩家显示任务完成后的奖励，
之前ResService.cs和BaseData.cs里对配置数据类和解析配置数据方法里删除了金币、经验值的定义；
这里还是需要重新写回定义；方便展示任务奖励时使用；
改回：
public class AutoGuideCfg : BaseData<AutoGuideCfg>
{
    public int npcID;// 触发任务目标NPC索引号
    public string dialogArr;// 对话数据
    public int actID;// 目标任务ID
    public int coin;// 金币
    public int exp;// 经验值
}
public class ResService : MonoBehaviour
{
    ... ...
    private void InitGuideCfg(string path)
    {
            ... ...
            foreach (XmlElement e in nodeList[i].ChildNodes)
            {
                switch (e.Name)
                {
                    case "npcID": ag.npcID = int.Parse(e.InnerText); break;
                    case "dialogArr": ag.dialogArr = e.InnerText; break;//具体对话窗口再处理对话
                    case "actID": ag.actID = int.Parse(e.InnerText); break;
                    case "coin": ag.coin = int.Parse(e.InnerText); break;
                    case "exp": ag.exp = int.Parse(e.InnerText); break;
                }
            }
            ... ...
      }
       ... ...
}

2、场景里弹窗提示获得的奖励
GameRoot.AddTips("任务奖励 金币+" + curTaskData.coin + " 经验+" + curTaskData.exp);

3、根据配置表的actID设置后续要进行的操作
public void RspGuide(GameMsg msg)
{
    RspGuide data = msg.rspGuide;//获取服务器数据
    GameRoot.AddTips("任务奖励 金币+" + curTaskData.coin + " 经验+" + curTaskData.exp);
    switch (curTaskData.actID)//读取任务的actID，执行相应的操作
    {
        case 0: break;//与智者对话
        case 1: break;//TODO 进入副本
        case 2: break;//TODO 进行装备强化
        case 3: break;//TODO 进行体力购买
        case 4: break;//TODO 进行金币购买
        case 5: break;//TODO 进行世界聊天
    }
}

三、将任务引导完成后更新的玩家数据传到GameRoot.cs里更新记录
1、新建根据任务引导信息设置玩家数据的函数SetPlayerDataByGuide()
并在MainCitySystem.cs的RspGuide()里进行调用
public void SetPlayerDataByGuide(RspGuide data)
{
    PlayerData.guideid = data.guideid;
    playerData.lv = data.lv;
    playerData.exp = data.exp;
    playerData.coin = data.coin;
}
2、这里方便区分设置玩家数据的函数，将SetPlayerData()重命名为SetPlayerDataByLogin()

四、更新主城UI显示
更新玩家等级、经验、金币等UI显示
1、将MainCityWnd.cs里的RefreshUI()的修饰词从private改为public
主城UI显示设置由RefreshUI()控制，这里将RefreshUI()设置为公开的，

2、刷新主城UI显示
在MainCitySystem.cs的RspGuide()里进行调用MainCityWnd.cs的RefreshUI()，刷新主城UI显示
public void RspGuide(GameMsg msg)
{
    ... ...
    GameRoot.Instance.SetPlayerDataByGuide(data);//把更新的玩家数据，更新到GameRoot里
    mainCityWnd.RefreshUI();//刷新主城UI显示
}

五、优化设置和解决bug
1、优化角色移动
这里将主角预制体身上NavMeshAgent组件的Acceleration改大一点，使角色转弯移动等更自然一点
原：Acceleration=8 改为：Acceleration=20

2、将信息界面InfoWnd.cs里的RefreshUI也改为Public，并在属性主城界面UI时，也更新信息界面数据

3、主城界面体力进度条image，原来设置为slice类型，改为Filled类型，进度随进度值变化；

4、解决服务器读取配置文件路径报错bug
读取xml文件应该是：doc.Load(filePath);
而不是：doc.LoadXml(filePath);
故修改服务器CfgSvs.cs的InitGuideCfg()里的读取xml配置文件写法为：
XmlDocument doc = new XmlDocument();
doc.Load(@"E:\GitLibrary\PersonalProjectLibrary\3DOnlineRPGGames\DarkGodOfWar\Client\Assets\Resources\ResConfigs\taskguide.xml");

5、任务运行金币正常获取，经验值始终为0的bug
服务器CfgSvs.cs的InitGuideCfg()里解析配置表数据，
设置经验值时，将经验值赋值给金币，所以一直为0
改：
private void InitGuideCfg()
{
        ... ...
        foreach (XmlElement e in nodeList[i].ChildNodes)
        {
            switch (e.Name)
            {
                case "coin": ag.coin = int.Parse(e.InnerText); break;
                case "exp": ag.exp = int.Parse(e.InnerText); break;
            }
        }
        ... ...
}


六、保存运行
可以看到正常走完所有引导任务







