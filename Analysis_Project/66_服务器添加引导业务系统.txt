
一、添加初始化引导业务系统
1、新建引导业务系统
02System文件夹下新建02GuideSys文件夹，02GuideSys文件夹里新建GuideSys.cs

2、参照LoginSys.cs，对GuideSys.cs进行初始化
将GuideSystem.cs设置为单例，
添加初始化函数，添加缓存层的引用，初始化时会进行数据更新，要用到缓存层

3、ServerRoot.cs里添加对GuideSys.cs的引用和初始化

二、处理客户端发来的引导任务消息
1、GameMsg.cs里添加引导任务的错误码
判断服务器任务id和客户端任务id不匹配，即服务器数据异常
这种问题一般是客户端开挂了，解决方法：强制把客户端踢下线
public enum ErrorCode
{
    None = 0,// 没有错误
    ServerDataError,// 服务器数据异常
    ... ...
}

2、GuideSys.cs里添加对客户端引导消息的处理方法ReqGuide()
先做消息转换，后续完善更新玩家数据：
获取当前任务的奖励，并把奖励数据更新到数据库里，最后把更新的结果发回给客户端；
后续添加模块服务器统一读取配置文件

当前服务器只有任务id，没有任务对应的奖励信息，奖励信息在配置文件里，服务器里不存在；
也没有让客户端把奖励数据传到服务器，只传了引导任务id
原因是：客户端和服务器通信只穿有必要的数据，
一方面保证安全性，避免服务器数据篡改异常；另一方面减少服务器带宽流量；
像奖励金币经验这种，可以通过配置文件读取，没必要在网络通信时传递；

public void ReqGuide(MsgPack pack)
{
    ReqGuide data = pack.m_Msg.reqGuide;
    GameMsg msg = new GameMsg { cmd = (int)CMD.RspGuide };
    PlayerData pData = cacheSvc.GetPlayDataBySession(pack.m_Session);//获取缓存层里玩家数据
    if (pData.guideid == data.guideid)//确认客户端数据和玩家数据相等同步
    {
        pData.guideid += 1;//更新任务id
        //TODO，读取配置表文件，更新玩家数据
    }
    else msg.err = (int)ErrorCode.ServerDataError;
    pack.m_Session.SendMsg(msg);//将数据返回客户端
}

3、NetSvc.cs网络服务的HandOutMsg()里新增引导任务消息的的分支处理
private void HandOutMsg(MsgPack msgPack)
{
    switch ((CMD)msgPack.m_Msg.cmd)
    {
        ... ...
        case CMD.ReqGuide:GuideSys.Instance.ReqGuide(msgPack);break;
        default: break;
    }
}
















