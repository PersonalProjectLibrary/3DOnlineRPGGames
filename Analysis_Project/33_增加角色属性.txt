
让角色的属性丰富点，后面开发会用到其他属性；

一、数据库设置：
打开数据库account数据表，选中account，右键--设计表，
点击“插入栏位”，新增玩家属性：
hp玩家血量，ad物理伤害，ap法术伤害，addef物理防御，apdef法术防御，
dodge闪避概率，pierce穿透比率，critical暴击概率；
设置为后，对数据库保存，选中数据库，右键--转储SQL文件到DarkGodOfWar\Sql文件夹里

二、服务器更新玩家数据设置
主要是GameMsg.cs文件里的人物属性，DBManager.cs里的Sql语句

1、GameMsg.cs文件里面PlayerData类的人物属性更新
public class PlayerData
{
    public int id;// ID
    public string name;// 玩家名
    public int lv;// 等级
    public int exp;// 经验值
    public int power;// 体力
    public int coin;// 金币
    public int diamond;// 钻石
    public int hp;// 血量
    public int ad;// 物理伤害
    public int ap;// 法术伤害
    public int addef;// 物理防御
    public int apdef;// 法术防御
    public int dodge;// 闪避概率
    public int pierce;// 穿透比率
    public int critical;// 暴击概率
}

2、DBManager.cs里的Sql语句更新
（1）QueryPlayerData()
查询玩家数据，玩家属性设置更新；以及查询时发现是新玩家创建新账号时，设置玩家默认值更新
public PlayerData QueryPlayerData(string acct,string pass)
{
    ... ...
    try
    {
        ... ...
        if (reader.Read())//处理数据
        {
            isNew = false;//有旧账号
            string _pass = reader.GetString("pass");
            if (_pass.Equals(pass))
            {
                playerData = new PlayerData//密码正确，返回玩家数据
                {
                    id = reader.GetInt32("id"),
                    name = reader.GetString("name"),
                    lv = reader.GetInt32("level"),
                    exp = reader.GetInt32("exp"),
                    power = reader.GetInt32("power"),
                    coin = reader.GetInt32("coin"),
                    diamond = reader.GetInt32("diamond"),
                    hp = reader.GetInt32("hp"),
                    ad = reader.GetInt32("ad"),
                    ap = reader.GetInt32("ap"),
                    addef = reader.GetInt32("addef"),
                    apdef = reader.GetInt32("apdef"),
                    dodge = reader.GetInt32("dodge"),
                    pierce = reader.GetInt32("pierce"),
                    critical = reader.GetInt32("critical")
                };
            }
        }
    }
    ... ...
    finally
    {
        ... ...
        if (isNew)
        {
            playerData = new PlayerData
            {
                id = -1, name = "", lv = 1, exp = 0, power = 150, coin = 5000,
                diamond = 500, hp = 2000, ad = 275, ap = 265, addef = 67,
                apdef = 43, dodge = 7, pierce = 5, critical = 2
            };
            ... ...
        }
    }
    return playerData;
}

（2）InsertNewAcctData()
往数据库插入新账号时，数据库连接里设置的属性更新：
private int InsertNewAcctData(string acct, string pass, PlayerData pData)
{
    int id = -1;
    try
    {
        MySqlCommand cmd = new MySqlCommand("insert into account set acct=@acct,pass=@pass,name=@name,level=@level,exp=@exp,power=@power,coin=@coin,diamond=@diamond,hp=@hp,ad=@ad,ap=@ap,addef=@addef,apdef=@apdef,dodge=@dodge,pierce=@pierce,critical=@critical", SqlConnection);
        cmd.Parameters.AddWithValue("acct", acct);
        cmd.Parameters.AddWithValue("pass", pass);
        cmd.Parameters.AddWithValue("name", pData.name);
        cmd.Parameters.AddWithValue("level", pData.lv);
        cmd.Parameters.AddWithValue("exp", pData.exp);
        cmd.Parameters.AddWithValue("power", pData.power);
        cmd.Parameters.AddWithValue("coin", pData.coin);
        cmd.Parameters.AddWithValue("diamond", pData.diamond);
        cmd.Parameters.AddWithValue("hp", pData.hp);
        cmd.Parameters.AddWithValue("ad", pData.ad);
        cmd.Parameters.AddWithValue("ap", pData.ap);
        cmd.Parameters.AddWithValue("addef", pData.addef);
        cmd.Parameters.AddWithValue("apdef", pData.apdef);
        cmd.Parameters.AddWithValue("dodge", pData.dodge);
        cmd.Parameters.AddWithValue("pierce", pData.pierce);
        cmd.Parameters.AddWithValue("critical", pData.critical);
        cmd.ExecuteNonQuery();
        id = (int)cmd.LastInsertedId;
    }
    catch (Exception e) { PECommon.Log("Insert PlayerData Error：" + e, LogType.Error); }
    return id;
}


（3）UpdatePlayerData()
更新数据库里的玩家数据，也要新增玩家属性
public bool UpdatePlayerData(int id,PlayerData playerData)
{
    try
    {
        MySqlCommand cmd = new MySqlCommand(
"update account set name=@name,level=@level,exp=@exp,power=@power,coin=@coin,diamond=@diamond,hp=@hp,ad=@ad,ap=@ap,addef=@addef,apdef=@apdef,dodge=@dodge,pierce=@pierce,critical=@critical where id =@id", SqlConnection);
        cmd.Parameters.AddWithValue("id", id);
        cmd.Parameters.AddWithValue("name", playerData.name);
        cmd.Parameters.AddWithValue("level", playerData.lv);
        cmd.Parameters.AddWithValue("exp", playerData.exp);
        cmd.Parameters.AddWithValue("power", playerData.power);
        cmd.Parameters.AddWithValue("coin", playerData.coin);
        cmd.Parameters.AddWithValue("diamond", playerData.diamond);
        cmd.Parameters.AddWithValue("hp", playerData.hp);
        cmd.Parameters.AddWithValue("ad", playerData.ad);
        cmd.Parameters.AddWithValue("ap", playerData.ap);
        cmd.Parameters.AddWithValue("addef", playerData.addef);
        cmd.Parameters.AddWithValue("apdef", playerData.apdef);
        cmd.Parameters.AddWithValue("dodge", playerData.dodge);
        cmd.Parameters.AddWithValue("pierce", playerData.pierce);
        cmd.Parameters.AddWithValue("critical", playerData.critical);
        cmd.ExecuteNonQuery();
    }
    catch (Exception e)
    {
        PECommon.Log("Update PlayerData Error：" + e, LogType.Error);
        return false;
    }
    return true;
}

3、保存数据库工程，编译更新PEProtocol
菜单栏：生成--重新生成解决方案，
选中解决方案里PEProtocol项目，右键--生成；
等待服务器和客户端编译完成；

三、运行测试
打开数据库
运行服务器，查看--正常运行；
点击运行游戏，正常登录创建进入主场景






